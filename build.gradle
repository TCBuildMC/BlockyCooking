plugins {
    id "architectury-plugin" version "3.4-SNAPSHOT"
    id "dev.architectury.loom" version "1.6-SNAPSHOT" apply false
    id "io.github.pacifistmc.forgix" version "1.2.9"
}

architectury {
    minecraft = rootProject.minecraft_version
}

subprojects {
    apply plugin: "dev.architectury.loom"

    loom {
        setEnableTransitiveAccessWideners true
        setEnableModProvidedJavadoc true
    }

    repositories {
        maven {
            url = "https://maven.architectury.dev/"
        }
        maven {
            url = "https://maven.shedaniel.me/"
        }
        maven {
            url = "https://api.modrinth.com/maven"
            content {
                includeGroup "maven.modrinth"
            }
        }
        maven {
            url = "https://jitpack.io/"
        }
    }

    dependencies {
        minecraft "com.mojang:minecraft:${rootProject.minecraft_version}"
        // The following line declares the yarn mappings you may select this one as well.
        mappings "net.fabricmc:yarn:${rootProject.yarn_version}:v2"

        implementation "com.google.code.findbugs:jsr305:${rootProject.jsr305_version}"
        annotationProcessor(compileOnly("org.projectlombok:lombok:${rootProject.lombok_version}"))
    }
}

allprojects {
    apply plugin: "java"
    apply plugin: "architectury-plugin"
    apply plugin: "maven-publish"

    base {
        archivesName = rootProject.archives_base_name + "-" + project.name + "+" + rootProject.minecraft_version
    }

    version = rootProject.mod_version
    group = rootProject.maven_group

    repositories {
        // Add repositories to retrieve artifacts from in here.
        // You should only use this when depending on other mods because
        // Loom adds the essential maven repositories to download Minecraft and libraries from automatically.
        // See https://docs.gradle.org/current/userguide/declaring_repositories.html
        // for more information about repositories.
        mavenCentral()
    }

    tasks.withType(JavaCompile) {
        options.encoding = "UTF-8"
        options.release = 17
    }

    compileJava.dependsOn clean

    java {
        withSourcesJar()
    }
}

forgix {
    group = rootProject.maven_group // (Required Value)
    mergedJarName = rootProject.archives_base_name + "+" + rootProject.minecraft_version + "-" + rootProject.mod_version + ".jar" // (Required Value)
    outputDir = "build/libs/merged"

    forge {
        projectName = "forge"
        jarLocation = "build/libs/" + rootProject.archives_base_name + "-forge+" + rootProject.minecraft_version + "-" + rootProject.mod_version + ".jar"

//        additionalRelocate "org.my.lib" "forge.org.my.lib"
//        additionalRelocate "org.my.lib.another" "forge.org.my.lib.another"

        mixin "blockycooking.mixins.json"
        mixin "blockycooking-forge.mixins.json"
    }

//    neoforge {
//        projectName = "neoforge"
//        jarLocation = "build/libs/" + rootProject.archives_base_name + "-neoforge+" + rootProject.minecraft_version + "-" + rootProject.mod_version + ".jar"
//
////        additionalRelocate "org.my.lib" "neoforge.org.my.lib"
////        additionalRelocate "org.my.lib.another" "neoforge.org.my.lib.another"
//
//        mixin "midnightcooking.mixins.json"
//    }

    fabric {
        projectName = "fabric"
        jarLocation = "build/libs/" + rootProject.archives_base_name + "-fabric+" + rootProject.minecraft_version + "-" + rootProject.mod_version + ".jar"

//        additionalRelocate "org.my.lib" "fabric.org.my.lib"
//        additionalRelocate "org.my.lib.another" "fabric.org.my.lib.another"
    }

//    removeDuplicate "org.example.mod.core"
}
